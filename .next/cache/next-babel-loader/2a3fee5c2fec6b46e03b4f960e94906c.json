{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyun-kyungyi/JULI/decentralized-kickstarter/pages/campaigns/new.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\n\nclass CampaignNew extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      minimContribution: \"\",\n      errorMessage: \"\"\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n\n      try {\n        const accounts = await web3.eth.getAccounts(); // we don't have to specify gas fee, because metamask calculates it automatically for us\n        // we only have to specify it when we are running tests\n\n        await factory.methods.createCampaign(this.state.minimContribution).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create a New Campaign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        erro: this.state.errorMessage,\n        r: true,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Minimum Contribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"wei\",\n            labelPosition: \"right\",\n            value: this.state.minimContribution,\n            onChange: event => this.setState({\n              minimContribution: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          primary: true,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CampaignNew;","map":{"version":3,"sources":["/Users/hyun-kyungyi/JULI/decentralized-kickstarter/pages/campaigns/new.js"],"names":["React","Component","Form","Button","Input","Message","Layout","factory","web3","CampaignNew","minimContribution","errorMessage","event","preventDefault","accounts","eth","getAccounts","methods","createCampaign","state","send","from","err","setState","message","render","onSubmit","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,OAA9B,QAA6C,mBAA7C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAEA,MAAMC,WAAN,SAA0BR,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAC1B;AACNS,MAAAA,iBAAiB,EAAE,EADb;AAENC,MAAAA,YAAY,EAAE;AAFR,KAD0B;;AAAA,sCAMvB,MAAOC,KAAP,IAAiB;AAC1BA,MAAAA,KAAK,CAACC,cAAN;;AAEA,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB,CADE,CAEF;AACA;;AACA,cAAMT,OAAO,CAACU,OAAR,CACHC,cADG,CACY,KAAKC,KAAL,CAAWT,iBADvB,EAEHU,IAFG,CAEE;AAAEC,UAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AAAhB,SAFF,CAAN;AAGD,OAPD,CAOE,OAAMQ,GAAN,EAAW;AACX,aAAKC,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAEW,GAAG,CAACE;AAApB,SAAd;AACD;AACF,KAnBiC;AAAA;;AAqBlCC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKC,QAArB;AAA+B,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWR,YAAhD;AAA6D,QAAA,CAAC,MAA9D;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AACE,YAAA,KAAK,EAAC,KADR;AAEE,YAAA,aAAa,EAAC,OAFhB;AAGE,YAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWT,iBAHpB;AAIE,YAAA,QAAQ,EAAGE,KAAD,IACR,KAAKW,QAAL,CAAc;AAAEb,cAAAA,iBAAiB,EAAEE,KAAK,CAACe,MAAN,CAAaC;AAAlC,aAAd;AALJ;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE,QAAC,OAAD;AAAS,UAAA,KAAK,MAAd;AAAe,UAAA,MAAM,EAAC,OAAtB;AAA8B,UAAA,OAAO,EAAE,KAAKT,KAAL,CAAWR;AAAlD;AAAA;AAAA;AAAA;AAAA,gBAZF,eAaE,QAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AA1CiC;;AA6CpC,eAAeF,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport factory from \"../../ethereum/factory\";\nimport web3 from \"../../ethereum/web3\";\n\nclass CampaignNew extends Component {\n  state = {\n    minimContribution: \"\",\n    errorMessage: \"\"\n  };\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      // we don't have to specify gas fee, because metamask calculates it automatically for us\n      // we only have to specify it when we are running tests\n      await factory.methods\n        .createCampaign(this.state.minimContribution)\n        .send({ from: accounts[0] });\n    } catch(err) {\n      this.setState({ errorMessage: err.message });\n    }\n  };\n\n  render() {\n    return (\n      <Layout>\n        <h1>Create a New Campaign</h1>\n        <Form onSubmit={this.onSubmit} erro={this.state.errorMessage}r>\n          <Form.Field>\n            <label>Minimum Contribution</label>\n            <Input\n              label=\"wei\"\n              labelPosition=\"right\"\n              value={this.state.minimContribution}\n              onChange={(event) =>\n                this.setState({ minimContribution: event.target.value })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage}/>\n          <Button primary>Create</Button>\n        </Form>\n      </Layout>\n    );\n  }\n}\n\nexport default CampaignNew;\n"]},"metadata":{},"sourceType":"module"}